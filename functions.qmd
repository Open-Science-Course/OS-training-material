---
title: "Writing Functions in R"
subtitle: "Open transparent and reproducible science"
author: "Richard J Telford"
institute: "University of Bergen"
format: revealjs
editor: visual
execute: 
  echo: true
---

```{r}
#| label: setup
#| echo: false
library(tidyverse)
library(palmerpenguins)

## set theme
theme_set(theme_bw())

```

# Are your R skills sufficient?

------------------------------------------------------------------------

::: r-fit-text
Can you spell\
~~funktion~~ ~~FUNkshun~~\
function?
:::

## Don't worry if you cannot

::: r-fit-text
You can\
use a \\ instead
:::

## My ~~first~~ worst function

```{r}
#| echo: true
#| eval: false
f <- function(){}
f()
```

Takes no arguments.
Does not work.
Returns nothing.

Guaranteed never to fail.

::: incremental
-   `f` is a terrible name for a function - use a descriptive name
-   keyword `function` used to define functions
-   `()` contain all the arguments separated by commas
-   `{}` contain the body of the function
:::

## Why write functions?

::: incremental
-   Reduce code duplication: Don't repeat yourself
-   Share between projects
-   Share with others
-   Promote better documentation
-   Easier to test
-   Easier to debug
:::

## Don't repeat yourself DRY

```{r}
#| eval: false
library(tidyverse)
library(palmerpenguins)

penguins |> 
  filter(species == "Gentoo") |> 
  ggplot(aes(x = body_mass_g, y = bill_length_mm)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(x = "Body mass g", y = "Bill length mm", title = "Gentoo")

penguins |> 
  filter(species == "Adelie") |> 
  ggplot(aes(x = body_mass_g, y = bill_length_mm)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(x = "Body mass g", y = "Bill length mm", title = "Gentoo")

```

## Identify arguments

General -- Specific functions

-   General - more arguments, more flexible, more complex
-   Specific - fewer arguments, less flexible, simpler

```{r}
#| eval: false
penguins |> 
  filter(species == "Adelie") |> 
  ggplot(aes(x = body_mass_g, y = bill_length_mm)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(x = "Body mass g", y = "Bill length mm", title = "Gentoo")
```

## Sanity check inputs

Make your functions idiot proof.

```{r}
#| error: true
area_square <- function(side = 1) {
  if (! is.numeric(side)) {
    stop("side must be numeric")
  }
  if (side <= 0) {
    stop("side must be positive")
  }
  side^2
}  
area_square("fish")
area_square(-1)
  
```

## Keep it Simple

One function - one job

```{r}
complex <- function(arg1, arg2, ...) { # bad
  # complex code to import data
  # complex code to clean data
  # complex code to model code
  # complex code to plot model
}
```

Large complex function

-   difficult to understand
-   many arguments
-   difficult to test

## Break into smaller functions

```{r}
# Better
import_fun <- function(arg1) {
  # complex code to import data
}
  
clean_fun <- function(.data) {
  # complex code to clean data
}  

model_fun <- function(.data_clean) {
  # complex code to model code
}

plot_fun <- function(.data_clean) {
  # complex code to plot model
}    
  
complex <- function(arg1, arg2, ...) { 
  .data <- import_fun(arg1)
  .data_clean <- clean_fun(.data)
  mod <- model_fun(.data_clean)
  plot <- plot_fun(.data_clean)
  list(mod = mod, plot = plot)
}  
```

## Functions using tidyverse

Tidyverse is fantastic for interactive analyses.

Bit complex with functions.

```{r}
filter_penguins <- function(.data, species) {
  .data |> 
    filter(species == species)
}
  
filter_penguins(penguins, "Gentoo")  
```

Do you need to use tidyverse?

-   reducing the number of dependencies is good

## brace brace

```{r}
filter_penguins <- function(.data, species) {
  .data |> 
    filter(species == {{species}})
}
  
filter_penguins(penguins, "Gentoo")  
```

## And on the left hand side

```{r}
filter_penguins <- function(.data, column, value, new_col) {
  .data |> 
    filter({{column}} == {{value}}) |> 
    mutate({{new_col}} := mean(body_mass_g)) # := instead of =
  
}
  
filter_penguins(penguins, island, "Dream", island_mean)  
```

## Your turn

```{r}
#| eval: false
penguins |> 
  filter(species == "Adelie") |> 
  ggplot(aes(x = body_mass_g, y = bill_length_mm)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(x = "Body mass g", y = "Bill length mm", title = "Gentoo")
```

# You cannot write functions without writing bugs.<br><br> That is the law

## Bugs

-   Syntax error
-   Incorrect results
-   function throws unexpected error

## Buggy code

```{r}
#| error: true
buggy <- function(x){
  x <- as.character(x)
  log(x)
}
buggy(1)
```

## Strategies for debugging 0

-   Read the error messages
-   Use `traceback()` to see where the error occurred
-   Use `options(error = recover)` to enter the debugger when an error occurs

## Strategies for debugging 1

-   Add `print()` statements to see state of variables

```{r}
#| error: true  
buggy <- function(x){
  print(class(x))
  x <- as.character(x)
  print(class(x))
  log(x)
}
buggy(1)
```

## Strategies for debugging 2

-   Add `browser()` somewhere strategic

```{r}
#| error: true  
#| eval: false
buggy <- function(x){
  browser()
  x <- as.character(x)
  log(x)
}
buggy(1)
```

In the debugger, use

-   `n` to step through the code
-   `c` to continue
-   `s` to step into a function
-   `Q` to quit

## Strategies for debugging 3

Use `debug` to automatically add `browser()`

```{r}
#| eval: false
debug(buggy)
buggy(1)
undebug(buggy)

# or
debugonce(buggy)
```

## Slow code

R is normally fast enough, but when it isn't it isn't

Use `tictoc` package to time code

```{r}
library(tictoc)
tic()
Sys.sleep(1)
toc()
```

## `bench::mark()`

Use `bench::mark()` to compare different implementations

```{r}
#| label: bench-mark
bm <- bench::mark(
  badloop = {x <- c(); for(i in 1:1000){x <- c(x, i^2)}; x},
  goodloop = {x <- numeric(1000); for(i in 1:1000){x[i] <- i^2}; x},
  map = purrr::map_dbl(1:1000, \(i) i^2),
  vectorised = (1:1000)^2
)
plot(bm)

```

## Profiler

```{r}
#| eval: false
library(profvis)

f <- function() {
  pause(0.1)
  g()
  h()
}
g <- function() {
  pause(0.1)
  h()
}
h <- function() {
  pause(0.1)
}

profvis(f())
```

## Cures for slow code

Readability is more important than speed

-   Use vectorised code
-   parallelize code with `furrr` or `future` packages

## More resources

[profvis](https://profvis.r-lib.org/)

[R for Data Science](https://r4ds.hadley.nz/functions.html) by Hadley Wickham and Garrett Grolemund

[Advanced R](https://adv-r.hadley.nz/) by Hadley Wickham
